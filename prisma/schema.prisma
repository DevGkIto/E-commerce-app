generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    String  @id @default(cuid())
  name  String
  email String  @unique
  image String?
  order Order?

  accounts Account[]
  sessions Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Product {
  id           String      @id @default(cuid())
  productTitle String
  description  String
  price        Float
  imageUrl     String
  league       String
  team         String
  orderItems   OrderItem[] // Relation back to OrderItem

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Order {
  id         String      @id @default(cuid())
  userId     String      @unique
  user       User        @relation(fields: [userId], references: [id])
  items      OrderItem[] // Products in this order
  totalPrice Float

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model OrderItem {
  productId String
  product   Product @relation(fields: [productId], references: [id])
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  quantity  Int     @default(1)
  price     Float

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@id([orderId, productId]) // Composite primary key
}
